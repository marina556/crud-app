{"version":3,"sources":["component/ListItem/item.js","component/ListItem/ListItem.js","component/CrudForm/Form.js","App.js","serviceWorker.js","index.js"],"names":["Item","state","isEdit","val","props","ele","course","change","e","target","value","setState","courseedit","preventDefault","changehandler","index","handeledit","updateForm","onSubmit","className","type","onChange","placeholder","renderCorseLi","onClick","delitem","this","Component","ListItem","vvvv","item","length","map","key","Form","handelchange","x","handelSubmit","addnew","id","App","items","addnewcourse","obj","newid","push","editItem","indexOf","i","splice","newval","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.46103ec9.chunk.js","sourcesContent":["import React, { Component, Fragment } from \"react\"\r\n\r\nclass Item extends Component{\r\n    state={\r\n        isEdit:false,\r\n        val:this.props.ele.course\r\n    }\r\n \r\n    change=(e)=>{\r\n        const val =  e.target.value;\r\n        this.setState({\r\n           val \r\n        })\r\n    }\r\n    courseedit=(e)=>{\r\n        e.preventDefault();\r\n        this.props.changehandler(this.props.index,this.state.val);\r\n        this.handeledit()\r\n    }\r\n    updateForm =()=>{\r\n        return(\r\n        <form onSubmit={this.courseedit} className=\"row\">\r\n            <input className=\"col-md-9 col-7\" type=\"text\" value={this.state.val} onChange={this.change} placeholder=\"enter new course\" />\r\n            <button className=\"addbtn btn col-md-3 col-5\" >edit Course</button>\r\n        </form>\r\n\r\n        )\r\n        \r\n    }\r\n\r\n    renderCorseLi = () =>{\r\n        return(\r\n            \r\n        <li className=\"row\">\r\n                    <span className=\"col-4 col-md-6\">{this.props.ele.course}</span>\r\n                    <span className=\"col-4 col-md-3\"><button className=\"btn addbtn col-11\" onClick={()=>{this.handeledit()}}>Edit</button></span>\r\n                    {/* <span className=\"col-2 text-right\"><button onClick={()=>this.handeledit()}>edit</button></span> */}\r\n                    <span className=\"col-4 col-md-3 text-right\"><button className=\"btn btn-danger col-11\" onClick={()=>this.props.delitem(this.props.ele.course)}>delete</button></span>\r\n        </li>\r\n        )\r\n    }\r\n\r\n    handeledit=()=>{\r\n        let {isEdit} = this.state;\r\n        this.setState({\r\n            isEdit:!isEdit\r\n        })\r\n    }\r\n\r\n    render(){\r\n        let {isEdit} =this.state\r\n        return(\r\n            <Fragment>\r\n                {isEdit ? this.updateForm() : this.renderCorseLi()}\r\n                </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Item","import React, { Component } from \"react\"\r\nimport { Fragment } from \"react\";\r\nimport './ListItem.css'\r\nimport Item from './item'\r\nclass ListItem extends Component{\r\n  \r\n    vvvv=()=>{\r\n        const {item} = this.props;\r\n        const listitems = item.length? (item.map((ele,index)=>{\r\n            return(\r\n                <ul className=\"list\" key={index}>\r\n                    <Item changehandler={this.props.changehandler} key={index} ele={ele} index={index} delitem={this.props.delitem} />\r\n                    {/* <li className=\"row\">\r\n                    <span className=\"col-8\">{ele.course}</span>\r\n                    <span className=\"col-2\"><button className=\"btn addbtn col-11\" onClick={()=>this.handelEdit(index)}>Edit</button></span>\r\n                    <span className=\"col-2 text-right\"><button className=\"btn btn-danger col-11\" onClick={()=>this.props.delitem(ele.course)}>delete</button></span>\r\n                    </li> */}\r\n                </ul>\r\n            )\r\n        })):<p className=\"no-item\">No Courses to Show!</p>\r\n        return listitems\r\n    }\r\n\r\n    render(){\r\n    //   this.vvvv.listitems\r\n\r\n        return(\r\n            <Fragment>{this.vvvv()}</Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ListItem","import React, { Component } from \"react\"\r\nimport \"./Form.css\"\r\nclass Form extends Component{\r\n    state={\r\n        course:''\r\n    }\r\n\r\n    handelchange=(e)=>{\r\n        let x =e.target.value;\r\n        this.setState({\r\n            course:x\r\n        })\r\n    }\r\n\r\n    handelSubmit=(e)=>{\r\n        e.preventDefault();\r\n        if(e.target.course.value === \"\"){\r\n            return false\r\n        }\r\n        else{\r\n            const {addnew} = this.props;\r\n            addnew(this.state);\r\n            this.setState({\r\n               course:''\r\n            })\r\n        }\r\n\r\n    }\r\n    render(){\r\n        return(\r\n            <div>\r\n                <form onSubmit={this.handelSubmit} className=\"row\">\r\n                    <input className=\"col-md-9 col-7\" type=\"text\" id=\"course\" placeholder=\"enter new course\" onChange={this.handelchange} value={this.state.course}/>\r\n                    <button className=\"addbtn btn col-md-3 col-5\">add course</button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Form","import React, { Component } from 'react';\nimport './App.css';\nimport ListItem from './component/ListItem/ListItem'\nimport Form from './component/CrudForm/Form'\n\nclass App extends Component{\n  state={\n    items:[\n      {course:'html'},\n      {course:'JavaScript'},\n      {course:'BootStrap'}\n    ]\n  }\n\n  addnewcourse =(obj)=>{\n    let {items} = this.state;\n    let newid = items.length;\n    obj.id=newid;\n    items.push(obj);\n    this.setState({\n      items\n    })\n  }\n\n  editItem = (val)=>{\n    let {items} = this.state;\n    const index = items.indexOf(i=>i.course===val);\n    items.splice(index,1);\n    this.setState({\n      items\n    })\n  }\n  delitem=(val)=>{\n    let {items} = this.state;\n    const index = items.indexOf(i=>i.course===val);\n    items.splice(index,1);\n    this.setState({\n      items\n    })\n  }\n\n    changehandler=(index,newval)=>{\n      let {items} = this.state;\n      let item = items[index];\n      item.course=newval\n      this.setState({\n        items\n      })\n      // console.log(this.state)\n    }\n    // courseedit=(e)=>{\n    //     e.preventDefault();\n    //     console.log(this.state.val)\n    // }\n\n\n  render(){\n    return (\n      <div className=\"App container\">\n        <h2>Add Courses</h2>\n        <Form  addnew={this.addnewcourse}/>\n        <ListItem item={this.state.items} delitem={this.delitem} changehandler={this.changehandler}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\n// import $ from 'jquery';\n// import Popper from 'popper.js';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}